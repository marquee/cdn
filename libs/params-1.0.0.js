// Generated by CoffeeScript 1.6.2
/*
Parameters manager - https://github.com/droptype/params
*/


(function() {
  var INTERNAL, Params,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  INTERNAL = ['set', 'getAll', '_strict'];

  Params = (function() {
    Params.VERSION = '1.0.0';

    function Params(opts) {
      if (opts == null) {
        opts = {};
      }
      this.set = __bind(this.set, this);
      this._strict = opts.strict != null ? opts.strict : false;
    }

    Params.prototype.set = function(key, value) {
      var key_list, prev_key, target_obj;

      if (__indexOf.call(INTERNAL, key) >= 0) {
        throw new Error("Cannot set the '" + key + "' param, silly.");
      }
      key_list = key.split('.');
      target_obj = this;
      prev_key = null;
      while (key_list.length > 0) {
        key = key_list.shift();
        if (typeof target_obj !== 'object') {
          throw new Error("Cannot set subparameter '" + prev_key + "." + key + "'. '" + prev_key + "' is not an object.");
        }
        if (key_list.length === 0) {
          if (target_obj[key] != null) {
            if (this._strict) {
              throw new Error("Param '" + key + "' was already set with `" + target_obj[key] + "`");
            }
            if (typeof console !== "undefined" && console !== null) {
              if (typeof console.warn === "function") {
                console.warn("Param '" + key + "' overridden (`" + target_obj[key] + "` with `" + value + "`)");
              }
            }
          }
          target_obj[key] = value;
        } else {
          if (target_obj[key] == null) {
            target_obj[key] = {};
          }
          target_obj = target_obj[key];
        }
        prev_key = key;
      }
      return this;
    };

    Params.prototype.getAll = function() {
      var k, param_obj, v;

      param_obj = {};
      for (k in this) {
        v = this[k];
        if (__indexOf.call(INTERNAL, k) < 0) {
          param_obj[k] = v;
        }
      }
      return param_obj;
    };

    return Params;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Params;
  } else if (typeof window !== "undefined" && window !== null) {
    window.Params = Params;
  }

}).call(this);
