/*
Doodad v0.2.1
Public Domain, https://github.com/droptype/doodad
2013-9-17

Contains a copy of spin.js, http://fgnass.github.io/spin.js
Copyright (c) 2011-2013 Felix Gnass
Licensed under the MIT license
*/

;(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
(function() {
  var BaseDoodad, View, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  View = Backbone.View;

  BaseDoodad = (function(_super) {
    __extends(BaseDoodad, _super);

    function BaseDoodad() {
      this.toggleEnabled = __bind(this.toggleEnabled, this);
      this.isEnabled = __bind(this.isEnabled, this);
      this.enable = __bind(this.enable, this);
      this.disable = __bind(this.disable, this);
      this.show = __bind(this.show, this);
      this.hide = __bind(this.hide, this);
      this.getSize = __bind(this.getSize, this);
      this.getScreenPosition = __bind(this.getScreenPosition, this);
      this.getPosition = __bind(this.getPosition, this);      _ref = BaseDoodad.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    BaseDoodad.__doc__ = "Public: The base view for all Doodad components. Provides methods for\n        getting the size & position, hiding & showing, and enabling &\n        disabling. The enable and disable only set an attribute and don't\n        actually handle any disabling.\n";

    BaseDoodad.prototype.initialize = function(options) {
      this._is_enabled = true;
      if (options.css) {
        return this._setCSS(options.css);
      }
    };

    BaseDoodad.prototype.getPosition = function() {
      var height, left, top, width, x, y, _ref1;

      _ref1 = this.$el.offset(), top = _ref1.top, left = _ref1.left;
      width = this.$el.width();
      height = this.$el.height();
      x = left + width / 2;
      y = top + height / 2;
      return {
        x: x,
        y: y
      };
    };

    BaseDoodad.prototype.getScreenPosition = function() {
      var pos;

      pos = this.getPosition();
      pos.y -= $(window).scrollTop();
      return pos;
    };

    BaseDoodad.prototype.getSize = function() {
      return {
        width: this.$el.width(),
        height: this.$el.height()
      };
    };

    BaseDoodad.prototype.hide = function() {
      this.$el.hide();
      return this;
    };

    BaseDoodad.prototype.show = function() {
      this.$el.show();
      return this;
    };

    BaseDoodad.prototype.disable = function() {
      this._is_enabled = false;
      return this.$el.attr('disabled', true);
    };

    BaseDoodad.prototype.enable = function() {
      this._is_enabled = true;
      return this.$el.removeAttr('disabled');
    };

    BaseDoodad.prototype.isEnabled = function() {
      return this._is_enabled;
    };

    BaseDoodad.prototype.toggleEnabled = function() {
      if (this._is_enabled) {
        this.disable();
      } else {
        this.enable();
      }
      return this._is_enabled;
    };

    BaseDoodad.prototype._trapClick = function(e) {
      e.stopPropagation();
    };

    BaseDoodad.prototype._setClasses = function() {
      var c, class_list, _i, _len, _ref1, _ref2, _ref3, _ref4,
        _this = this;

      class_list = [];
      _ref1 = this._options.type.split('+');
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        c = _ref1[_i];
        class_list.push.apply(class_list, c.split('-'));
      }
      if (((_ref2 = this._options["class"]) != null ? _ref2.length : void 0) > 0) {
        class_list.push.apply(class_list, this._options["class"].split(' '));
      }
      class_list = _.map(class_list, function(c) {
        return "" + _this.className + "-" + c;
      });
      if ((_ref3 = this._options) != null ? _ref3.extra_classes : void 0) {
        if (_.isArray((_ref4 = this._options) != null ? _ref4.extra_classes : void 0)) {
          class_list.push.apply(class_list, this._options.extra_classes);
        } else {
          class_list.push(this._options.extra_classes);
        }
      }
      return this.$el.addClass(class_list.join(' '));
    };

    BaseDoodad.prototype._setCSS = function(css_rules) {
      return this.$el.css(css_rules);
    };

    return BaseDoodad;

  })(View);

  module.exports = BaseDoodad;

}).call(this);

},{}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
(function() {
  var BaseDoodad, Button, Spinner, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseDoodad = require('../BaseDoodad');

  Spinner = require('../subcomponents/Spinner');

  Button = (function(_super) {
    __extends(Button, _super);

    function Button() {
      this.setLabel = __bind(this.setLabel, this);
      this._handleClick = __bind(this._handleClick, this);      _ref = Button.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Button.__doc__ = '<Link to button docs>';

    Button.prototype.tagName = 'BUTTON';

    Button.prototype.className = 'Button';

    Button.prototype.initialize = function(options) {
      Button.__super__.initialize.apply(this, arguments);
      this._options = _.extend({}, {
        type: 'text',
        label: null,
        "class": null,
        helptext: null,
        enabled: true,
        spinner: false,
        progress: null,
        extra_classes: []
      }, options);
      this._validateOptions();
      if (!this._options.enabled) {
        this.disable();
      }
      if (this._options.spinner) {
        this._spinner = new Spinner({
          variant: this._options.type.indexOf('bare') === -1 ? 'light' : 'dark'
        });
      }
      return this.render();
    };

    Button.prototype._validateOptions = function() {
      var _ref1;

      if ((_ref1 = !this._options.type) === 'text' || _ref1 === 'icon' || _ref1 === 'icon+text' || _ref1 === 'text-bare' || _ref1 === 'icon-bare' || _ref1 === 'icon+text-bare') {
        throw new Error("Button type must be one of 'text', 'icon', 'icon+text', got " + this._options.type + ".");
      }
      if (this._options.type === 'text' && !this._options.label) {
        throw new Error("Buttons of type='text' MUST have a label set.");
      }
      if ((this._options.action == null) && (this._options.url == null)) {
        throw new Error("A Button action function or url must be specified.");
      }
    };

    Button.prototype._setClasses = function() {
      Button.__super__._setClasses.call(this);
      if (this._options.spinner) {
        return this.$el.addClass('Button-spinner');
      }
    };

    Button.prototype.render = function() {
      this.$el.empty();
      this._setClasses();
      if (this._options.label) {
        this.$el.append('<span class="Button_label"></span>');
        this.setLabel(this._options.label);
      }
      if (this._options.type.indexOf('icon') !== -1) {
        this.$el.prepend('<div class="Button_icon_display"></div>');
      }
      if (this._options.spinner) {
        this.$el.append(this._spinner.render());
      }
      this.delegateEvents();
      return this.el;
    };

    Button.prototype.disable = function() {
      Button.__super__.disable.call(this);
      return this._setInactive();
    };

    Button.prototype.enable = function() {
      Button.__super__.enable.call(this);
      return this._setInactive();
    };

    Button.prototype._setActive = function() {
      var _ref1;

      if ((_ref1 = this._spinner) != null) {
        _ref1.start();
      }
      return this.$el.addClass('active');
    };

    Button.prototype._setInactive = function() {
      var _ref1;

      if ((_ref1 = this._spinner) != null) {
        _ref1.stop();
      }
      return this.$el.removeClass('active');
    };

    Button.prototype.events = {
      'click': '_handleClick'
    };

    Button.prototype._handleClick = function(e) {
      if (e != null) {
        e.stopPropagation();
      }
      if (this._options.spinner) {
        this.disable();
        this._setActive();
      }
      this._options.action(this);
    };

    Button.prototype.setLabel = function(label) {
      var _ref1;

      if ((_ref1 = this._options.type) === 'icon' || _ref1 === 'icon-bare') {
        this.$el.attr('title', label);
      } else {
        this.$el.find('.Button_label').text(label);
      }
      return this;
    };

    return Button;

  })(BaseDoodad);

  module.exports = Button;

}).call(this);

},{"../BaseDoodad":1,"../subcomponents/Spinner":10}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
(function() {
  var BaseDoodad, Select, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseDoodad = require('../BaseDoodad');

  Select = (function(_super) {
    __extends(Select, _super);

    function Select() {
      this._setChoice = __bind(this._setChoice, this);      _ref = Select.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Select.__doc__ = "";

    Select.prototype.tagName = 'DIV';

    Select.prototype.className = 'Select';

    Select.prototype.initialize = function(options) {
      Select.__super__.initialize.apply(this, arguments);
      this._options = _.extend({}, {
        type: 'drop',
        width: null,
        height: null,
        label: '',
        placeholder: '- - -',
        variant: null,
        enabled: true,
        required: false,
        extra_classes: []
      }, options);
      return this.render();
    };

    Select.prototype._setClasses = function() {
      var class_list, _ref1,
        _this = this;

      class_list = this._options.type.split('+');
      if (((_ref1 = this._options["class"]) != null ? _ref1.length : void 0) > 0) {
        class_list.push.apply(class_list, this._options["class"].split(' '));
      }
      class_list = _.map(class_list, function(c) {
        return "" + _this.className + "-" + c;
      });
      class_list.push.apply(class_list, this._options.extra_classes);
      return this.$el.addClass(class_list.join(' '));
    };

    Select.prototype.render = function() {
      this.$el.empty();
      this._setClasses();
      this.ui = {};
      switch (this._options.type) {
        case 'drop':
          this._renderDrop();
          break;
        case 'grid':
          this._renderGrid();
      }
      this.delegateEvents();
      return this.el;
    };

    Select.prototype.events = {
      'click .Select_value': '_showChoices',
      'click .Select_label': '_showChoices'
    };

    Select.prototype._showChoices = function() {
      var _this = this;

      this.ui.choices.css({
        opacity: 0,
        left: this.ui.value.position().left
      });
      this.ui.choices.removeAttr('data-hidden');
      return _.defer(function() {
        var left, top, _ref1;

        _ref1 = _this._selected_choice_el.position(), top = _ref1.top, left = _ref1.left;
        _this.ui.choices.css({
          top: -1 * top,
          opacity: ''
        });
        console.log(top, left);
        return _this.ui.value.attr('data-hidden', true);
      });
    };

    Select.prototype._setChoice = function(choice, opts) {
      if (opts == null) {
        opts = {};
      }
      console.log('setting choice', choice.value);
      this.ui.choices.find('[data-selected]').removeAttr('data-selected');
      if (_.isFunction(choice.value)) {
        this.value = choice.value(this);
      } else {
        this.value = choice.value;
      }
      this._selected_choice_el = choice.$el;
      this._selected_choice_el.attr('data-selected', true);
      this.ui.value.text(choice.label);
      this.ui.choices.attr('data-hidden', true);
      this.ui.value.removeAttr('data-hidden');
      if (!opts.silent) {
        return this._options.action(this, this.value, choice.label);
      }
    };

    Select.prototype._renderGrid = function() {
      return this.$el.html("<div class=\"Select_label\">Category:</div>\n<div class=\"Select_choices\">\n    <div class=\"Select_choice\">\n        <span class=\"Select_choice_label\">Option 1\n    </div>\n    <div class=\"Select_choice\" data-selected=\"true\">Option 2</div>\n    <div class=\"Select_choice\">Option 3</div>\n    <div class=\"Select_choice\">Option 4</div>\n    <div class=\"Select_choice\">Option 5</div>\n</div>");
    };

    Select.prototype._renderDrop = function() {
      var has_default, makeChoiceEl,
        _this = this;

      this.ui.label = $("<div class='Select_label'>" + this._options.label + "</div>");
      this.ui.value = $("<div class='Select_value'><div>");
      this.ui.choices = $("<div class='Select_choices'></div>");
      has_default = false;
      makeChoiceEl = function(choice) {
        choice.$el = $("<div class='Select_choice" + (choice.null_choice ? '-null' : '') + "'>\n    <span class='Select_choice_label'>\n        " + choice.label + "\n    </span>\n</div>");
        choice.$el.attr('data-value', choice.value);
        return choice.$el.on('click', function() {
          return _this._setChoice(choice);
        });
      };
      _.each(this._options.choices, function(choice) {
        console.log(choice);
        makeChoiceEl(choice);
        if (choice["default"]) {
          has_default = true;
          _this._setChoice(choice, {
            silent: true
          });
        }
        return _this.ui.choices.append(choice.$el);
      });
      if (!(has_default && this._options.required)) {
        (function() {
          var null_choice;

          null_choice = {
            null_choice: true,
            label: _this._options.placeholder,
            value: null
          };
          makeChoiceEl(null_choice);
          _this.ui.choices.prepend(null_choice.$el);
          if (!has_default) {
            return _this._setChoice(null_choice, {
              silent: true
            });
          }
        })();
      }
      this.$el.append(this.ui.label);
      this.$el.append(this.ui.value);
      return this.$el.append(this.ui.choices);
    };

    return Select;

  })(BaseDoodad);

  module.exports = Select;

}).call(this);

},{"../BaseDoodad":1}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
(function() {
  var BaseDoodad, KEYCODES, StringInput, parseLimit, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  BaseDoodad = require('../BaseDoodad');

  parseLimit = function(limit) {
    var soft;

    if (limit[0] === '~') {
      limit = parseInt(limit.slice(1));
      soft = true;
    } else {
      limit = parseInt(limit);
      soft = false;
    }
    return [soft, limit];
  };

  StringInput = (function(_super) {
    __extends(StringInput, _super);

    function StringInput() {
      _ref = StringInput.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    StringInput.__doc__ = "";

    StringInput.prototype.tagName = 'DIV';

    StringInput.prototype.className = 'StringInput';

    StringInput.prototype.initialize = function(options) {
      var event, handler, _ref1, _ref2, _ref3;

      this._is_enabled = true;
      this._options = _.extend({}, {
        tokenize: null,
        variant: null,
        helptext: null,
        enabled: true,
        multiline: false,
        unique: false,
        placeholder: '',
        label: '',
        extra_classes: [],
        char_limit: null,
        word_limit: null,
        value: '',
        on: {}
      }, options);
      StringInput.__super__.initialize.call(this, this._options);
      this.raw_value = '';
      if (this._options.tokenize) {
        this.value = this._options.value ? this._options.value : [];
        this.raw_value = this.value.join(this._options.tokenize);
        this._current_token = '';
      } else {
        this.value = this._options.value;
      }
      if (this._options.char_limit) {
        _ref1 = parseLimit(this._options.char_limit), this._options.limit_is_soft = _ref1[0], this._options.char_limit = _ref1[1];
      } else if (this._options.word_limit) {
        _ref2 = parseLimit(this._options.word_limit), this._options.limit_is_soft = _ref2[0], this._options.word_limit = _ref2[1];
      }
      _ref3 = this._options.on;
      for (event in _ref3) {
        handler = _ref3[event];
        this.on(event, handler);
      }
      return this.render();
    };

    StringInput.prototype._setClasses = function() {
      var class_list;

      class_list = [];
      if (this._options.tokenize != null) {
        class_list.push('StringInput-tokenize');
      }
      if (this._options.multiline) {
        class_list.push('StringInput-multiline');
      }
      class_list.push.apply(class_list, this._options.extra_classes);
      return this.$el.addClass(class_list.join(' '));
    };

    StringInput.prototype.render = function() {
      this._setClasses();
      this._ui = {};
      if (this._options.tokenize) {
        this.$el.html("<label class=\"StringInput_label\">\n    " + this._options.label + "\n</label>\n<div class=\"StringInput_token_form\">\n    <div class=\"StringInput_tokens\"></div>\n    <input class=\"StringInput_input\" placeholder=\"" + this._options.placeholder + "\">\n</div>");
        this._ui.tokens = this.$el.find('.StringInput_tokens');
      } else if (this._options.multiline) {
        this.$el.html("<label>\n    <span class=\"StringInput_label\">" + this._options.label + "</span>\n    <textarea class=\"StringInput_input\" placeholder=\"" + this._options.placeholder + "\"></textarea>\n</label>");
      } else {
        this.$el.html("<label>\n    <span class=\"StringInput_label\">" + this._options.label + "</span>\n    <input class=\"StringInput_input\" placeholder=\"" + this._options.placeholder + "\">\n</label>");
      }
      this._ui.input = this.$el.find('.StringInput_input');
      if (this._options.tokenize) {
        this._renderTokens();
      } else {
        if (this._options.char_limit || this._options.word_limit) {
          this._ui.limit_counter = $('<span class="StringInput_counter"></span>');
          this.$el.find('label').append(this._ui.limit_counter);
          this._updateCharCount();
        }
        this._ui.input.val(this.value);
      }
      this.delegateEvents();
      if (!this._options.enabled) {
        this.disable();
      }
      return this.el;
    };

    StringInput.prototype.disable = function() {
      this._ui.input.attr('disabled', true);
      return StringInput.__super__.disable.call(this);
    };

    StringInput.prototype.enable = function() {
      this._ui.input.removeAttr('disabled');
      return StringInput.__super__.enable.call(this);
    };

    StringInput.prototype._calcLimit = function() {
      var count, limit, _ref1;

      if (this._options.char_limit) {
        limit = this._options.char_limit;
        count = this.value.length;
      } else {
        limit = this._options.word_limit;
        count = ((_ref1 = this.value.match(/[\d\w_-]+/g)) != null ? _ref1.length : void 0) || 0;
      }
      this.over_limit = count > limit;
      return [this.over_limit, count, limit];
    };

    StringInput.prototype._updateCharCount = function() {
      var count, limit, over_limit, _ref1;

      _ref1 = this._calcLimit(), over_limit = _ref1[0], count = _ref1[1], limit = _ref1[2];
      this._ui.limit_counter.text("" + count + "/" + limit);
      this._ui.limit_counter.removeClass('StringInput_counter-warn StringInput_counter-over');
      if (over_limit) {
        this._ui.limit_counter.addClass('StringInput_counter-over');
      } else if (count > limit * 0.8) {
        this._ui.limit_counter.addClass('StringInput_counter-warn');
      }
      return [over_limit, count, limit];
    };

    StringInput.prototype._renderTokens = function() {
      var _this = this;

      this._ui.tokens.empty();
      return _.each(this.value, function(token) {
        var $el;

        $el = $("<span class='StringInput_token'>\n    <span class=\"StringInput_token_value\"></span>\n    <button class=\"StringInput_token_remove\">x</button>\n</span>");
        $el.find('.StringInput_token_value').text(token);
        $el.find('.StringInput_token_remove').on('click', function(e) {
          e.stopPropagation();
          return _this._removeToken(token);
        });
        return _this._ui.tokens.append($el);
      });
    };

    StringInput.prototype._updatePlaceholder = function() {
      console.log('_updatePlaceholder', this.value.length);
      if (this.value.length > 0) {
        return this._ui.input.attr('placeholder', '');
      } else {
        return this._ui.input.attr('placeholder', this._options.placeholder);
      }
    };

    StringInput.prototype.events = {
      'keydown    .StringInput_input': '_handleInput',
      'paste      .StringInput_input': '_handleInput',
      'click      .StringInput_token_form': '_focusInput',
      'blur       .StringInput_input': '_fireBlur',
      'focus      .StringInput_input': '_fireFocus'
    };

    StringInput.prototype._focusInput = function() {
      if (this._is_enabled) {
        return this._ui.input.focus();
      }
    };

    StringInput.prototype._fireBlur = function() {
      return this.trigger('blur', this);
    };

    StringInput.prototype._fireFocus = function() {
      return this.trigger('focus', this);
    };

    StringInput.prototype._removeToken = function(token) {
      this.value = _.without(this.value, token);
      this._renderTokens();
      this.raw_value = this.value.join(this._options.tokenize);
      return this.trigger('change', this, this.value, this.raw_value);
    };

    StringInput.prototype._processPaste = function(e) {
      var _this = this;

      _.defer(function() {
        var incoming_value, _ref1;

        incoming_value = _this._ui.input.val();
        if (_this._options.tokenize != null) {
          _this._ui.input.val('');
          incoming_value = incoming_value.split(_this._options.tokenize);
          incoming_value = _.map(incoming_value, function(x) {
            return x.trim();
          });
          (_ref1 = _this.value).push.apply(_ref1, incoming_value);
          _this._renderTokens();
        } else {
          _this.raw_value = _this.value = incoming_value;
        }
        return _this.trigger('change', _this, _this.value, _this.raw_value);
      });
    };

    StringInput.prototype._handleInput = function(e) {
      var previous_value, was_token_trigger, _ref1,
        _this = this;

      was_token_trigger = (_ref1 = e.which) === KEYCODES.ENTER || _ref1 === KEYCODES.TAB;
      if (this._options.tokenize) {
        if (was_token_trigger) {
          e.preventDefault();
        }
        _.defer(function() {
          var incoming_char, incoming_value, prev_token, was_token_delimiter;

          incoming_value = _this._ui.input.val();
          if (incoming_value.length > 0) {
            was_token_delimiter = false;
            incoming_char = '';
            if (incoming_value[incoming_value.length - 1] === _this._options.tokenize) {
              incoming_value = incoming_value.split('');
              incoming_char = incoming_value.pop();
              incoming_value = incoming_value.join('');
              was_token_delimiter = true;
            }
            if (was_token_delimiter || was_token_trigger) {
              incoming_value = incoming_value.trim();
              _this._ui.input.val('');
              if (incoming_value && !(_this._options.unique && __indexOf.call(_this.value, incoming_value) >= 0)) {
                _this.raw_value += incoming_char;
                _this.value.push(incoming_value);
                _this._renderTokens();
                _this.trigger('change', _this, _this.value, _this.raw_value);
              }
            }
          } else {
            if (e.which === KEYCODES.DELETE) {
              prev_token = _this.value.pop();
              _this._renderTokens();
              _this._ui.input.val(prev_token);
              _this.raw_value = _this.value.join(_this._options.tokenize);
              _this.trigger('change', _this, _this.value, _this.raw_value);
            }
          }
          return _this._updatePlaceholder();
        });
      } else {
        previous_value = this.value;
        _.defer(function() {
          var count, limit, over_limit, _ref2;

          _this.raw_value = _this.value = _this._ui.input.val();
          if (_this._options.char_limit || _this._options.word_limit) {
            _ref2 = _this._calcLimit(), over_limit = _ref2[0], count = _ref2[1], limit = _ref2[2];
            if (over_limit && !_this._options.limit_is_soft) {
              _this.raw_value = _this.value = previous_value;
              _this._ui.input.val(previous_value);
            }
            _this._updateCharCount();
          }
          return _this.trigger('change', _this, _this.value, _this.raw_value);
        });
      }
      if (e.which === 88 && e.metaKey) {
        _.defer(function() {
          return _this._handleInput(e);
        });
      }
    };

    return StringInput;

  })(BaseDoodad);

  KEYCODES = {
    DELETE: 8,
    TAB: 9,
    ENTER: 13
  };

  module.exports = StringInput;

}).call(this);

},{"../BaseDoodad":1}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
(function() {
  var AppBar, View, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  View = Backbone.View;

  AppBar = (function(_super) {
    __extends(AppBar, _super);

    function AppBar() {
      this.addToTail = __bind(this.addToTail, this);
      this.addToHead = __bind(this.addToHead, this);
      this.render = __bind(this.render, this);
      this.attachTo = __bind(this.attachTo, this);      _ref = AppBar.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    AppBar.__doc__ = '';

    AppBar._name = 'AppBar';

    AppBar.prototype.initialize = function(options) {
      console.log('AppBar.initialize');
      this._options = _.extend({}, {
        head: [],
        tail: [],
        responsive: true,
        pinned: true,
        position: 'top',
        attach_to: 'body',
        inject_padding: true
      }, options);
      this._validateOptions();
      this._setClasses();
      if (this._options.attach_to) {
        return this.attachTo($(this._options.attach_to));
      }
    };

    AppBar.prototype._validateOptions = function() {
      var _ref1;

      if ((_ref1 = !this._options.position) === 'top' || _ref1 === 'bottom' || _ref1 === 'left' || _ref1 === 'right') {
        throw new Error("AppBar position must be one of 'top', 'bottom', 'left', 'right'. Got: " + this._options.position);
      }
    };

    AppBar.prototype._setClasses = function() {
      this.$el.addClass(this.constructor._name);
      this.$el.addClass("AppBar-" + this._options.position);
      if (this._options.responsive) {
        return this.$el.addClass('AppBar-responsive');
      }
    };

    AppBar.prototype.attachTo = function($target_el) {
      var _this = this;

      this.$el.detach();
      $target_el.append(this.render());
      return _.defer(function() {
        var css_to_set, head_width, tail_width, _ref1;

        if ((_ref1 = _this._options.position) === 'left' || _ref1 === 'right') {
          head_width = _this.$el.find('.AppBar_head').width();
          tail_width = _this.$el.find('.AppBar_tail').width();
          if (head_width < tail_width) {
            head_width = tail_width;
          }
          _this.$el.css({
            width: head_width
          });
        }
        if (_this._options.inject_padding) {
          css_to_set = {
            'padding-top': 0,
            'padding-bottom': 0,
            'padding-left': 0,
            'padding-right': 0
          };
          switch (_this._options.position) {
            case 'top':
              css_to_set['padding-top'] = _this.$el.height();
              break;
            case 'bottom':
              css_to_set['padding-bottom'] = _this.$el.height();
              break;
            case 'left':
              css_to_set['padding-left'] = _this.$el.width();
              break;
            case 'right':
              css_to_set['padding-right'] = _this.$el.width();
          }
          return $target_el.css(css_to_set);
        }
      });
    };

    AppBar.prototype.render = function() {
      var $head, $tail;

      this.$el.html("<div class='AppBar_head'></div>\n<div class='AppBar_tail'></div>");
      $head = this.$el.find('.AppBar_head');
      _.each(this._options.head, function(element) {
        return $head.append(element.render());
      });
      $tail = this.$el.find('.AppBar_tail');
      _.each(this._options.tail, function(element) {
        return $tail.append(element.render());
      });
      return this.el;
    };

    AppBar.prototype.addToHead = function(item) {
      this._options.head.push(item);
      return this.render();
    };

    AppBar.prototype.addToTail = function(item) {
      this._options.tail.push(item);
      return this.render();
    };

    return AppBar;

  })(View);

  module.exports = AppBar;

}).call(this);

},{}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
(function() {
  var $window, BaseDoodad, Layout, Panel, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BaseDoodad = require('../BaseDoodad');

  $window = $(window);

  Panel = (function(_super) {
    __extends(Panel, _super);

    function Panel() {
      _ref = Panel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Panel.prototype.className = 'Panel';

    Panel.prototype.initialize = function(_layout) {
      this._layout = _layout;
      return Panel.__super__.initialize.apply(this, arguments);
    };

    Panel.prototype.render = function() {
      console.log('Panel.render');
      return this.el;
    };

    Panel.prototype.setLayout = function(_layout) {
      this._layout = _layout;
      return this.$el.css({
        width: this._layout.width,
        height: this._layout.height,
        position: 'absolute',
        left: this._layout.left,
        top: this._layout.top,
        background: this._layout.background,
        overflow: 'scroll',
        'transition-property': 'all',
        'transition-duration': '0.1s'
      });
    };

    Panel.prototype.setContent = function() {
      var contents,
        _this = this;

      contents = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      console.log('setting content', contents);
      this.$el.empty();
      return _.each(contents, function(item) {
        return _this.$el.append(item.render());
      });
    };

    return Panel;

  })(BaseDoodad);

  Layout = (function(_super) {
    __extends(Layout, _super);

    function Layout() {
      this.setPanelSize = __bind(this.setPanelSize, this);
      this.setPanelContent = __bind(this.setPanelContent, this);
      this.getPanel = __bind(this.getPanel, this);
      this.resize = __bind(this.resize, this);      _ref1 = Layout.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Layout.prototype.className = 'Layout';

    Layout.prototype.initialize = function(options) {
      var _this = this;

      this._row_first = options.row_first != null ? options.row_first : true;
      this._layout = options.layout;
      this._panels = [];
      this.$el.css({
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        background: 'rgba(240,240,240,0.5)'
      });
      this._layout.forEach(function(col, icol) {
        var col_list;

        col_list = [];
        _this._panels.push(col_list);
        return col[1].forEach(function(row, irow) {
          return col_list.push(new Panel());
        });
      });
      return $(window).on('resize', _.debounce(this.resize, 50));
    };

    Layout.prototype.render = function() {
      var _this = this;

      console.log('Layout.render');
      this.$el.empty();
      this._panels.forEach(function(col) {
        return col.forEach(function(panel) {
          return _this.$el.append(panel.render());
        });
      });
      this.resize();
      return this.el;
    };

    Layout.prototype.resize = function() {
      var fixed_row_size, h_so_far, num_flex_rows, num_panels, row_flex_size, window_height, window_width, _ref2,
        _this = this;

      window_width = this.$el.parent().width();
      window_height = this.$el.parent().height();
      if (!this._row_first) {
        _ref2 = [window_width, window_height], window_height = _ref2[0], window_width = _ref2[1];
      }
      num_flex_rows = 0;
      fixed_row_size = 0;
      _.each(this._layout, function(row) {
        if (row[0] === 'flex') {
          return num_flex_rows += 1;
        } else {
          return fixed_row_size += row[0];
        }
      });
      h_so_far = 0;
      row_flex_size = (window_height - fixed_row_size) / num_flex_rows;
      num_panels = 0;
      return _.each(this._layout, function(row, irow) {
        var col_flex_size, cols, fixed_col_size, h, num_flex_cols, row_height, w_so_far;

        row_height = row[0], cols = row[1];
        h = row_height === 'flex' ? row_flex_size : row_height;
        num_flex_cols = 0;
        fixed_col_size = 0;
        _.each(cols, function(col) {
          if (col === 'flex') {
            return num_flex_cols += 1;
          } else {
            return fixed_col_size += col;
          }
        });
        col_flex_size = (window_width - fixed_col_size) / num_flex_cols;
        w_so_far = 0;
        _.each(cols, function(col, icol) {
          var layout_to_set, w;

          w = col === 'flex' ? col_flex_size : col;
          num_panels += 1;
          if (_this._row_first) {
            layout_to_set = {
              left: w_so_far,
              width: w,
              top: h_so_far,
              height: h
            };
          } else {
            layout_to_set = {
              top: w_so_far,
              height: w,
              left: h_so_far,
              width: h
            };
          }
          layout_to_set.background = "rgba(255,0,0,0." + num_panels + ")";
          _this._panels[irow][icol].setLayout(layout_to_set);
          return w_so_far += w;
        });
        return h_so_far += h;
      });
    };

    Layout.prototype.getPanel = function(i, j) {
      return this._panels[i][j];
    };

    Layout.prototype.setPanelContent = function() {
      var contents, i, j, _ref2;

      i = arguments[0], j = arguments[1], contents = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      return (_ref2 = this._panels[i][j]).setContent.apply(_ref2, contents);
    };

    Layout.prototype.setPanelSize = function(i, j, dim) {
      this._layout[i][1][j] = dim;
      return this.resize();
    };

    return Layout;

  })(Backbone.View);

  Layout.Panel = Panel;

  module.exports = Layout;

}).call(this);

},{"../BaseDoodad":1}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
(function() {
  var BaseDoodad, Button, Popover, active_popovers, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  BaseDoodad = require('../BaseDoodad');

  Button = require('../components/Button');

  active_popovers = {};

  Popover = (function(_super) {
    __extends(Popover, _super);

    function Popover() {
      this.toggle = __bind(this.toggle, this);
      this.hide = __bind(this.hide, this);
      this.show = __bind(this.show, this);
      this._setFlagPosition = __bind(this._setFlagPosition, this);
      this.render = __bind(this.render, this);      _ref = Popover.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Popover.prototype.className = 'Popover';

    Popover.prototype.initialize = function(options) {
      var event, handler, _ref1;

      Popover.__super__.initialize.apply(this, arguments);
      this._options = _.extend({}, {
        type: 'flag',
        content: [],
        width: 500,
        offset: [0, 0],
        close_on_outside: false,
        title: null,
        dismiss: null,
        confirm: null,
        solo: true,
        on: {}
      }, options);
      if (this._options.type.indexOf('flag') !== -1) {
        if (this._options.origin == null) {
          this._options.origin = 'top-left';
        }
      }
      _ref1 = this._options.on;
      for (event in _ref1) {
        handler = _ref1[event];
        this.on(event, handler);
      }
      this._setClasses();
      return this._is_showing = false;
    };

    Popover.prototype._setClasses = function() {
      Popover.__super__._setClasses.call(this);
      if (this._options.type.indexOf('flag') !== -1) {
        return this.$el.addClass("" + this.className + "-" + this._options.origin);
      }
    };

    Popover.prototype.render = function() {
      var _this = this;

      this.$el.empty();
      this.ui = {};
      this.ui.content = $('<div class="Popover_content"></div>');
      this.ui.content.css({
        width: this._options.width
      });
      if (this._options.title) {
        this.ui.content.append("<div class=\"Popover_title\">" + this._options.title + "</div>");
      }
      _.each(this._options.content, function(item) {
        return _this.ui.content.append(item.render());
      });
      if (this._options.dismiss || this._options.confirm) {
        this.ui.controls = $('<div class="Popover_controls"></div>');
        if (this._options.dismiss) {
          if (this._options.dismiss.render == null) {
            this._options.dismiss = new Button({
              label: this._options.dismiss,
              action: function() {
                _this.trigger('dismiss');
                return _this.hide();
              },
              extra_classes: 'Popover_dismiss'
            });
          }
          this.ui.controls.append(this._options.dismiss.render());
        }
        if (this._options.confirm) {
          if (this._options.confirm.render == null) {
            this._options.confirm = new Button({
              label: this._options.confirm,
              action: function() {
                _this.trigger('confirm');
                return _this.hide();
              },
              "class": 'friendly',
              extra_classes: 'Popover_confirm'
            });
          }
          this.ui.controls.append(this._options.confirm.render());
        }
        this.ui.content.append(this.ui.controls);
      }
      this.$el.append(this.ui.content);
      return this.el;
    };

    Popover.prototype.setPosition = function() {
      var args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (this._options.type === 'modal') {
        return this._setModalPosition.apply(this, args);
      } else {
        return this._setFlagPosition.apply(this, args);
      }
    };

    Popover.prototype._setModalPosition = function() {
      var $w, bottom, h_delta, height, padding, top, w_delta, width;

      width = this.ui.content.width();
      height = this.ui.content.height();
      $w = $(window);
      w_delta = ($w.width() - width) / 2;
      h_delta = ($w.height() - height) / 2;
      padding = parseInt(this.ui.content.css('padding'));
      w_delta -= padding;
      h_delta -= padding;
      if (w_delta < 50) {
        w_delta = 50;
      }
      bottom = '';
      if (h_delta < 50) {
        bottom = top = 50;
      } else if (h_delta > 100) {
        top = 100;
      }
      return this.ui.content.css({
        left: w_delta,
        right: w_delta,
        top: top,
        bottom: bottom
      });
    };

    Popover.prototype._setFlagPosition = function(_arg) {
      var edge, offset_x, offset_y, position, strToPos, x, y, _ref1,
        _this = this;

      x = _arg.x, y = _arg.y;
      offset_x = 0;
      offset_y = 0;
      strToPos = function(str) {
        switch (str) {
          case 'left':
            return offset_x = 0;
          case 'right':
            return offset_x = _this.ui.content.width();
          case 'top':
            return offset_y = 0;
          case 'bottom':
            return offset_y = _this.ui.content.height();
        }
      };
      _ref1 = this._options.origin.split('-'), edge = _ref1[0], position = _ref1[1];
      strToPos(edge);
      strToPos(position);
      if (edge === 'center') {
        offset_y = this.ui.content.height() / 2;
      }
      if (position === 'center') {
        if (edge === 'top' || edge === 'bottom') {
          offset_x = this.ui.content.width() / 2;
        } else {
          offset_y = this.ui.content.height() / 2;
        }
      }
      console.log(edge, position, offset_x, offset_y, this._options.offset);
      this.$el.css({
        left: x + this._options.offset[0],
        top: y + this._options.offset[1]
      });
      return this.ui.content.css({
        left: 0 - offset_x,
        top: 0 - offset_y
      });
    };

    Popover.prototype.show = function(trigger) {
      var _this = this;

      if (trigger == null) {
        trigger = null;
      }
      this._is_showing = true;
      active_popovers[this.cid] = this;
      console.log(active_popovers);
      $('body').append(this.render());
      if (this._options.close_on_outside) {
        _.defer(function() {
          return $(window).one('click', _this.hide);
        });
      }
      if (this._options.solo) {
        console.log('closing others!', this.cid);
        _.each(active_popovers, function(popover) {
          if ((popover != null) && popover.cid !== _this.cid) {
            return popover.hide();
          }
        });
      }
      this.ui.content.css('opacity', 0);
      return _.defer(function() {
        if (_this._options.type.indexOf('fixed') === -1) {
          _this.setPosition(trigger != null ? trigger.getPosition() : void 0);
        } else {
          _this.setPosition(trigger != null ? trigger.getScreenPosition() : void 0);
        }
        return _this.ui.content.css('opacity', 1);
      });
    };

    Popover.prototype.hide = function() {
      this._is_showing = false;
      active_popovers[this.cid] = null;
      return this.$el.detach();
    };

    Popover.prototype.toggle = function(trigger) {
      if (this._is_showing) {
        this.hide();
      } else {
        this.show(trigger);
      }
      return this._is_showing;
    };

    Popover.prototype.events = {
      'click *': '_trapClick',
      'click': 'hide'
    };

    return Popover;

  })(BaseDoodad);

  module.exports = Popover;

}).call(this);

},{"../BaseDoodad":1,"../components/Button":2}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
(function() {
  var AppBar, BaseDoodad, Button, Doodad, Layout, Popover, Select, Spinner, StringInput, Tags;

  BaseDoodad = require('./BaseDoodad');

  Spinner = require('./subcomponents/Spinner');

  Tags = require('./subcomponents/Tags');

  Button = require('./components/Button');

  Select = require('./components/Select');

  StringInput = require('./components/StringInput');

  AppBar = require('./containers/AppBar');

  Layout = require('./containers/Layout');

  Popover = require('./containers/Popover');

  Doodad = {
    AppBar: AppBar,
    BaseDoodad: BaseDoodad,
    Button: Button,
    Layout: Layout,
    Popover: Popover,
    Select: Select,
    Spinner: Spinner,
    StringInput: StringInput,
    Tags: Tags,
    VERSION: '0.2.1'
  };

  window.Doodad = Doodad;

}).call(this);

},{"./BaseDoodad":1,"./components/Button":2,"./components/Select":3,"./components/StringInput":4,"./containers/AppBar":5,"./containers/Layout":6,"./containers/Popover":7,"./subcomponents/Spinner":10,"./subcomponents/Tags":11}],9:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
(function() {
  module.exports = {
    vendorPrefixCSS: function(property, value) {
      var prefix, rules, _i, _len, _ref;

      rules = {};
      _ref = ['', '-webkit-', '-moz-', '-ms-', '-o-'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prefix = _ref[_i];
        rules["" + prefix + property] = value;
      }
      return rules;
    }
  };

}).call(this);

},{}],10:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
(function() {
  var BaseDoodad, SpinJS, Spinner, vendorPrefixCSS, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseDoodad = require('../BaseDoodad');

  SpinJS = require('spin');

  vendorPrefixCSS = require('../misc/helpers').vendorPrefixCSS;

  Spinner = (function(_super) {
    __extends(Spinner, _super);

    function Spinner() {
      this.stop = __bind(this.stop, this);
      this.start = __bind(this.start, this);
      this.isActive = __bind(this.isActive, this);
      this._setUpSpinner = __bind(this._setUpSpinner, this);
      this.render = __bind(this.render, this);      _ref = Spinner.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Spinner.prototype.tagName = 'SPAN';

    Spinner.prototype.className = 'Spinner';

    Spinner.prototype.initialize = function(options) {
      var _this = this;

      this._options = _.extend({}, {
        type: 'arrows',
        variant: 'dark',
        active: false,
        extra_classes: [],
        size: null,
        auto_hide: true
      }, options);
      Spinner.__super__.initialize.call(this, this._options);
      this._rate = 1;
      this.render();
      if (this._options.auto_hide && this._options.active) {
        this.hide();
      }
      return _.defer(function() {
        if (_this._options.active) {
          return _this.start();
        } else {
          return _this.stop();
        }
      });
    };

    Spinner.prototype.render = function() {
      this._setClasses();
      return this.el;
    };

    Spinner.prototype._setUpSpinner = function(options) {
      var color, height, width, _ref1;

      if ((_ref1 = this._spinner) != null) {
        _ref1.stop();
      }
      if (this._options.variant === 'dark') {
        color = '#000';
      } else {
        color = '#fff';
      }
      width = parseInt(this.$el.css('width').replace('px', ''));
      height = parseInt(this.$el.css('height').replace('px', ''));
      options = _.extend({
        radius: width / 4,
        length: width / 4 - 1,
        width: 3,
        color: color,
        className: ''
      }, options);
      this._spinner = new SpinJS(options);
      this._spinner.spin(this.el);
      return this.$el.children().css({
        left: '50%',
        top: '50%'
      });
    };

    Spinner.prototype.isActive = function() {
      return this._active;
    };

    Spinner.prototype.start = function() {
      this.$el.addClass("" + this.className + "-active");
      this._active = true;
      this._setUpSpinner({
        speed: this._rate
      });
      if (this._options.auto_hide) {
        this.show();
      }
      return this;
    };

    Spinner.prototype.stop = function() {
      clearInterval(this._rotation_interval);
      this.$el.removeClass("" + this.className + "-active");
      this._active = false;
      this._setUpSpinner({
        speed: 0
      });
      if (this._options.auto_hide) {
        this.hide();
      }
      return this;
    };

    return Spinner;

  })(BaseDoodad);

  module.exports = Spinner;

}).call(this);

},{"../BaseDoodad":1,"../misc/helpers":9,"spin":12}],11:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
/*
They also provide convenient points to bind data changes, eg:
    
    p_node = new Doodad.Tags.P
        content: @model.get('text_property')
    @model.on 'change:text_property', ->
        p_node.setContent(@model.get('text_property'))


For Tags that contain content (ie non-self-closing), pass them strings:

    new Doodad.Tags.P
        content: 'Some text'

or lists of strings, other Tags, or other Doodads (or really anything that
implements a `.render()` method that returns an element to be appended):

    new Doodad.Tags.H1
        content: [
            new Doodad.Tags.A
                href: 'http://example.com'
                content: 'Some Title'
            new Doodad.Button
                type: 'icon'
                class: 'friendly'
                action: ->
            'Extra content'
        ]

Raw strings are wrapped in the element appropriate for the container,
eg as LI when in a UL or OL.

    new Doodad.Tags.UL
        content: [
            'List item content'
            'Other list item'
            'Third item in the list'
        ]

Otherwise, they are just text nodes:

    new Doodad.Tags.DIV
        extra_classes: ['inset', 'align-right']
        content: 'Some content inside a div'


Additional attributes used are added as HTML attributes:

    new Doodad.Tags.IMG
        src: 'http://placekitten.com/800/600/'
        title: 'Some kittens'
        'data-2x': 'http://placekitten.com/1600/1200/'

    link = new Doodad.Tags.A
        href: 'http://example.com'
        content: 'Link Content'
    link.setContent('other content')
    link.addContent('foo')

TODO:

* Perhaps p_node.bindToProperty(@model, 'text_property') that wraps the above?
* Allow for setting HTML as content (breaks down HTML text into correct nodes)
* Lowercase shortcut syntax, functions

    { p, h1, h2, h3, ul, div, img, a, ul, ol, li, span } = Doodad.Tags.Shortcuts

    tag({optional_attrs}, content_arguments...)

    p class:'classNames',
        'Paragraph content'
        a(href: 'http://example.com', 'Some Link in the P')
        'More text content'
*/


(function() {
  var A, BR, BaseDoodad, DIV, EM, H1, H2, H3, H4, H5, H6, IMG, LI, OL, P, SPAN, STRONG, Tag, TextNode, UL, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseDoodad = require('../BaseDoodad');

  TextNode = (function() {
    TextNode.__doc__ = '';

    function TextNode(_arg) {
      var content;

      content = _arg.content;
      this._node = document.createTextNode(content);
    }

    TextNode.prototype.render = function() {
      return this._node;
    };

    TextNode.prototype.setContent = function() {
      var content;

      content = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this._node.textContent = content.join('');
      return this;
    };

    TextNode.prototype.addContent = function() {
      var content;

      content = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.setContent.apply(this, [this._node.textContent].concat(__slice.call(content)));
      return this;
    };

    return TextNode;

  })();

  Tag = (function(_super) {
    __extends(Tag, _super);

    function Tag() {
      this.render = __bind(this.render, this);
      this.setContent = __bind(this.setContent, this);
      this.addContent = __bind(this.addContent, this);      _ref = Tag.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Tag.__doc__ = "Public: A base class for Tag components. All Tag-base classes MUST specify\n        a `@_takes_content` class property, either `true` or `false`. Also\n        they MUST set a `tagName` (otherwise they'll just be a div). The\n        classes also MAY specify a `@_default_child` class property which\n        is a Tag-based class to use for bare strings passed to content.\n\noptions - An object with configuration options for the tag.\n    * content   - (optional) A String, Tag, TextNode, or Array of any\n                    combination of the three. (optional since it MAY be\n                    added later using `.addContent()` or `.setContent()`.)\n    * ?options  - Any additional key-value attributes to be added to the el,\n                    like an `href` for a link or `src` for an image.\n\nGeneric example:\n\n    new <tagclass>\n        content: 'Some text content'\n        title: 'A title attribute'\n";

    Tag._takes_content = null;

    Tag._default_child = TextNode;

    Tag.prototype.initialize = function(options) {
      var k, v;

      if (options == null) {
        options = {};
      }
      this._options = _.extend({
        type: ''
      }, options);
      Tag.__super__.initialize.call(this, this._options);
      if (this.constructor._takes_content == null) {
        throw new Error('Doodad.Tag classes require a @_takes_content class property');
      }
      this._contents = [];
      if (this.constructor._takes_content) {
        if (options.content != null) {
          if (_.isArray(options.content)) {
            this.addContent.apply(this, options.content);
          } else {
            this.addContent(options.content);
          }
        }
      }
      for (k in options) {
        v = options[k];
        if (k !== 'model' && k !== 'content' && k !== 'extra_classes') {
          this.$el.attr(k, v);
        }
      }
      return this._setClasses();
    };

    Tag.prototype.addContent = function() {
      var contents,
        _this = this;

      contents = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _.each(contents, function(child_content) {
        var child;

        if (_.isString(child_content) || _.isNumber(child_content)) {
          child = new _this.constructor._default_child({
            content: child_content.toString()
          });
        } else {
          child = child_content;
        }
        _this._contents.push(child);
        return _this.$el.append(child.render());
      });
      return this;
    };

    Tag.prototype.setContent = function() {
      var contents;

      contents = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.$el.empty();
      this._contents = [];
      this.addContent.apply(this, contents);
      return this;
    };

    Tag.prototype.render = function() {
      var _this = this;

      this.$el.empty();
      _.each(this._contents, function(content) {
        return _this.$el.append(content.render());
      });
      return this.el;
    };

    return Tag;

  })(BaseDoodad);

  IMG = (function(_super) {
    __extends(IMG, _super);

    function IMG() {
      _ref1 = IMG.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    IMG._takes_content = false;

    IMG.prototype.tagName = 'IMG';

    IMG.prototype.className = 'IMG';

    return IMG;

  })(Tag);

  A = (function(_super) {
    __extends(A, _super);

    function A() {
      _ref2 = A.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    A._takes_content = true;

    A.prototype.tagName = 'A';

    A.prototype.className = 'A';

    return A;

  })(Tag);

  STRONG = (function(_super) {
    __extends(STRONG, _super);

    function STRONG() {
      _ref3 = STRONG.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    STRONG._takes_content = true;

    STRONG.prototype.tagName = 'STRONG';

    STRONG.prototype.className = 'STRONG';

    return STRONG;

  })(Tag);

  EM = (function(_super) {
    __extends(EM, _super);

    function EM() {
      _ref4 = EM.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    EM._takes_content = true;

    EM.prototype.tagName = 'EM';

    EM.prototype.className = 'EM';

    return EM;

  })(Tag);

  SPAN = (function(_super) {
    __extends(SPAN, _super);

    function SPAN() {
      _ref5 = SPAN.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    SPAN._takes_content = true;

    SPAN.prototype.tagName = 'SPAN';

    SPAN.prototype.className = 'SPAN';

    return SPAN;

  })(Tag);

  DIV = (function(_super) {
    __extends(DIV, _super);

    function DIV() {
      _ref6 = DIV.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    DIV._takes_content = true;

    DIV.prototype.tagName = 'DIV';

    DIV.prototype.className = 'DIV';

    return DIV;

  })(Tag);

  P = (function(_super) {
    __extends(P, _super);

    function P() {
      _ref7 = P.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    P._takes_content = true;

    P.prototype.tagName = 'P';

    P.prototype.className = 'P';

    return P;

  })(Tag);

  LI = (function(_super) {
    __extends(LI, _super);

    function LI() {
      _ref8 = LI.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    LI._takes_content = true;

    LI.prototype.tagName = 'LI';

    LI.prototype.className = 'LI';

    return LI;

  })(Tag);

  UL = (function(_super) {
    __extends(UL, _super);

    function UL() {
      _ref9 = UL.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    UL._takes_content = true;

    UL._default_child = LI;

    UL.prototype.tagName = 'UL';

    UL.prototype.className = 'UL';

    return UL;

  })(Tag);

  OL = (function(_super) {
    __extends(OL, _super);

    function OL() {
      _ref10 = OL.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    OL._takes_content = true;

    OL._default_child = LI;

    OL.prototype.tagName = 'OL';

    OL.prototype.className = 'OL';

    return OL;

  })(Tag);

  H1 = (function(_super) {
    __extends(H1, _super);

    function H1() {
      _ref11 = H1.__super__.constructor.apply(this, arguments);
      return _ref11;
    }

    H1._takes_content = true;

    H1.prototype.tagName = 'H1';

    H1.prototype.className = 'H1';

    return H1;

  })(Tag);

  H2 = (function(_super) {
    __extends(H2, _super);

    function H2() {
      _ref12 = H2.__super__.constructor.apply(this, arguments);
      return _ref12;
    }

    H2._takes_content = true;

    H2.prototype.tagName = 'H2';

    H2.prototype.className = 'H2';

    return H2;

  })(Tag);

  H3 = (function(_super) {
    __extends(H3, _super);

    function H3() {
      _ref13 = H3.__super__.constructor.apply(this, arguments);
      return _ref13;
    }

    H3._takes_content = true;

    H3.prototype.tagName = 'H3';

    H3.prototype.className = 'H3';

    return H3;

  })(Tag);

  H4 = (function(_super) {
    __extends(H4, _super);

    function H4() {
      _ref14 = H4.__super__.constructor.apply(this, arguments);
      return _ref14;
    }

    H4._takes_content = true;

    H4.prototype.tagName = 'H4';

    H4.prototype.className = 'H4';

    return H4;

  })(Tag);

  H5 = (function(_super) {
    __extends(H5, _super);

    function H5() {
      _ref15 = H5.__super__.constructor.apply(this, arguments);
      return _ref15;
    }

    H5._takes_content = true;

    H5.prototype.tagName = 'H5';

    H5.prototype.className = 'H5';

    return H5;

  })(Tag);

  H6 = (function(_super) {
    __extends(H6, _super);

    function H6() {
      _ref16 = H6.__super__.constructor.apply(this, arguments);
      return _ref16;
    }

    H6._takes_content = true;

    H6.prototype.tagName = 'H6';

    H6.prototype.className = 'H6';

    return H6;

  })(Tag);

  BR = (function(_super) {
    __extends(BR, _super);

    function BR() {
      _ref17 = BR.__super__.constructor.apply(this, arguments);
      return _ref17;
    }

    BR._takes_content = false;

    BR.prototype.tagName = 'BR';

    BR.prototype.className = 'BR';

    return BR;

  })(Tag);

  module.exports = {
    A: A,
    BR: BR,
    DIV: DIV,
    EM: EM,
    H1: H1,
    H2: H2,
    H3: H3,
    H4: H4,
    H5: H5,
    H6: H6,
    IMG: IMG,
    LI: LI,
    OL: OL,
    P: P,
    SPAN: SPAN,
    STRONG: STRONG,
    Tag: Tag,
    TextNode: TextNode,
    UL: UL
  };

}).call(this);

},{"../BaseDoodad":1}],12:[function(require,module,exports){
//fgnass.github.com/spin.js#v1.2.5
/**
 * Copyright (c) 2011 Felix Gnass [fgnass at neteye dot de]
 * Licensed under the MIT license
 */

var prefixes = ['webkit', 'Moz', 'ms', 'O']; /* Vendor prefixes */
var animations = {}; /* Animation rules keyed by their name */
var useCssAnimations;

/**
 * Utility function to create elements. If no tag name is given,
 * a DIV is created. Optionally properties can be passed.
 */
function createEl(tag, prop) {
  var el = document.createElement(tag || 'div');
  var n;

  for(n in prop) {
    el[n] = prop[n];
  }
  return el;
}

/**
 * Appends children and returns the parent.
 */
function ins(parent /* child1, child2, ...*/) {
  for (var i=1, n=arguments.length; i<n; i++) {
    parent.appendChild(arguments[i]);
  }
  return parent;
}

/**
 * Insert a new stylesheet to hold the @keyframe or VML rules.
 */
var sheet = function() {
  var el = createEl('style');
  ins(document.getElementsByTagName('head')[0], el);
  return el.sheet || el.styleSheet;
}();

/**
 * Creates an opacity keyframe animation rule and returns its name.
 * Since most mobile Webkits have timing issues with animation-delay,
 * we create separate rules for each line/segment.
 */
function addAnimation(alpha, trail, i, lines) {
  var name = ['opacity', trail, ~~(alpha*100), i, lines].join('-');
  var start = 0.01 + i/lines*100;
  var z = Math.max(1-(1-alpha)/trail*(100-start) , alpha);
  var prefix = useCssAnimations.substring(0, useCssAnimations.indexOf('Animation')).toLowerCase();
  var pre = prefix && '-'+prefix+'-' || '';

  if (!animations[name]) {
    sheet.insertRule(
      '@' + pre + 'keyframes ' + name + '{' +
      '0%{opacity:'+z+'}' +
      start + '%{opacity:'+ alpha + '}' +
      (start+0.01) + '%{opacity:1}' +
      (start+trail)%100 + '%{opacity:'+ alpha + '}' +
      '100%{opacity:'+ z + '}' +
      '}', 0);
    animations[name] = 1;
  }
  return name;
}

/**
 * Tries various vendor prefixes and returns the first supported property.
 **/
function vendor(el, prop) {
  var s = el.style;
  var pp;
  var i;

  if(s[prop] !== undefined) return prop;
  prop = prop.charAt(0).toUpperCase() + prop.slice(1);
  for(i=0; i<prefixes.length; i++) {
    pp = prefixes[i]+prop;
    if(s[pp] !== undefined) return pp;
  }
}

/**
 * Sets multiple style properties at once.
 */
function css(el, prop) {
  for (var n in prop) {
    el.style[vendor(el, n)||n] = prop[n];
  }
  return el;
}

/**
 * Fills in default values.
 */
function merge(obj) {
  for (var i=1; i < arguments.length; i++) {
    var def = arguments[i];
    for (var n in def) {
      if (obj[n] === undefined) obj[n] = def[n];
    }
  }
  return obj;
}

/**
 * Returns the absolute page-offset of the given element.
 */
function pos(el) {
  var o = {x:el.offsetLeft, y:el.offsetTop};
  while((el = el.offsetParent)) {
    o.x+=el.offsetLeft;
    o.y+=el.offsetTop;
  }
  return o;
}

var defaults = {
  lines: 12,            // The number of lines to draw
  length: 7,            // The length of each line
  width: 5,             // The line thickness
  radius: 10,           // The radius of the inner circle
  rotate: 0,            // rotation offset
  color: '#000',        // #rgb or #rrggbb
  speed: 1,             // Rounds per second
  trail: 100,           // Afterglow percentage
  opacity: 1/4,         // Opacity of the lines
  fps: 20,              // Frames per second when using setTimeout()
  zIndex: 2e9,          // Use a high z-index by default
  className: 'spinner', // CSS class to assign to the element
  top: 'auto',          // center vertically
  left: 'auto'          // center horizontally
};

/** The constructor */
var Spinner = function Spinner(o) {
  if (!this.spin) return new Spinner(o);
  this.opts = merge(o || {}, Spinner.defaults, defaults);
};

Spinner.defaults = {};
merge(Spinner.prototype, {
  spin: function(target) {
    this.stop();
    var self = this;
    var o = self.opts;
    var el = self.el = css(createEl(0, {className: o.className}), {position: 'relative', zIndex: o.zIndex});
    var mid = o.radius+o.length+o.width;
    var ep; // element position
    var tp; // target position

    if (target) {
      target.insertBefore(el, target.firstChild||null);
      tp = pos(target);
      ep = pos(el);
      css(el, {
        left: (o.left == 'auto' ? tp.x-ep.x + (target.offsetWidth >> 1) : o.left+mid) + 'px',
        top: (o.top == 'auto' ? tp.y-ep.y + (target.offsetHeight >> 1) : o.top+mid)  + 'px'
      });
    }

    el.setAttribute('aria-role', 'progressbar');
    self.lines(el, self.opts);

    if (!useCssAnimations) {
      // No CSS animation support, use setTimeout() instead
      var i = 0;
      var fps = o.fps;
      var f = fps/o.speed;
      var ostep = (1-o.opacity)/(f*o.trail / 100);
      var astep = f/o.lines;

      !function anim() {
        i++;
        for (var s=o.lines; s; s--) {
          var alpha = Math.max(1-(i+s*astep)%f * ostep, o.opacity);
          self.opacity(el, o.lines-s, alpha, o);
        }
        self.timeout = self.el && setTimeout(anim, ~~(1000/fps));
      }();
    }
    return self;
  },
  stop: function() {
    var el = this.el;
    if (el) {
      clearTimeout(this.timeout);
      if (el.parentNode) el.parentNode.removeChild(el);
      this.el = undefined;
    }
    return this;
  },
  lines: function(el, o) {
    var i = 0;
    var seg;

    function fill(color, shadow) {
      return css(createEl(), {
        position: 'absolute',
        width: (o.length+o.width) + 'px',
        height: o.width + 'px',
        background: color,
        boxShadow: shadow,
        transformOrigin: 'left',
        transform: 'rotate(' + ~~(360/o.lines*i+o.rotate) + 'deg) translate(' + o.radius+'px' +',0)',
        borderRadius: (o.width>>1) + 'px'
      });
    }
    for (; i < o.lines; i++) {
      seg = css(createEl(), {
        position: 'absolute',
        top: 1+~(o.width/2) + 'px',
        transform: o.hwaccel ? 'translate3d(0,0,0)' : '',
        opacity: o.opacity,
        animation: useCssAnimations && addAnimation(o.opacity, o.trail, i, o.lines) + ' ' + 1/o.speed + 's linear infinite'
      });
      if (o.shadow) ins(seg, css(fill('#000', '0 0 4px ' + '#000'), {top: 2+'px'}));
      ins(el, ins(seg, fill(o.color, '0 0 1px rgba(0,0,0,.1)')));
    }
    return el;
  },
  opacity: function(el, i, val) {
    if (i < el.childNodes.length) el.childNodes[i].style.opacity = val;
  }
});

/////////////////////////////////////////////////////////////////////////
// VML rendering for IE
/////////////////////////////////////////////////////////////////////////

/**
 * Check and init VML support
 */
!function() {

  function vml(tag, attr) {
    return createEl('<' + tag + ' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">', attr);
  }

  var s = css(createEl('group'), {behavior: 'url(#default#VML)'});

  if (!vendor(s, 'transform') && s.adj) {

    // VML support detected. Insert CSS rule ...
    sheet.addRule('.spin-vml', 'behavior:url(#default#VML)');

    Spinner.prototype.lines = function(el, o) {
      var r = o.length+o.width;
      var s = 2*r;

      function grp() {
        return css(vml('group', {coordsize: s +' '+s, coordorigin: -r +' '+-r}), {width: s, height: s});
      }

      var margin = -(o.width+o.length)*2+'px';
      var g = css(grp(), {position: 'absolute', top: margin, left: margin});

      var i;

      function seg(i, dx, filter) {
        ins(g,
          ins(css(grp(), {rotation: 360 / o.lines * i + 'deg', left: ~~dx}),
            ins(css(vml('roundrect', {arcsize: 1}), {
                width: r,
                height: o.width,
                left: o.radius,
                top: -o.width>>1,
                filter: filter
              }),
              vml('fill', {color: o.color, opacity: o.opacity}),
              vml('stroke', {opacity: 0}) // transparent stroke to fix color bleeding upon opacity change
            )
          )
        );
      }

      if (o.shadow) {
        for (i = 1; i <= o.lines; i++) {
          seg(i, -2, 'progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)');
        }
      }
      for (i = 1; i <= o.lines; i++) seg(i);
      return ins(el, g);
    };
    Spinner.prototype.opacity = function(el, i, val, o) {
      var c = el.firstChild;
      o = o.shadow && o.lines || 0;
      if (c && i+o < c.childNodes.length) {
        c = c.childNodes[i+o]; c = c && c.firstChild; c = c && c.firstChild;
        if (c) c.opacity = val;
      }
    };
  }
  else {
    useCssAnimations = vendor(s, 'animation');
  }
}();

module.exports = Spinner;

},{}]},{},[8])
;